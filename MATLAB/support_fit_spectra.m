%-------------------------------------------------------------------------------
% Function
%-------------------------------------------------------------------------------
function [U, gof] = support_fit_spectra(X, Y, aType)

i = ~isnan(Y);

% fitting
if strcmp(aType, 'pow')
  p0 = [1, -1, 0];
  [U, gof] = pow_fit(X, Y, p0);
elseif strcmp(aType, 'exp')
  p0 = [-0.1, 1, 0];
  [U, gof] = exp_fit(X, Y, p0);
elseif 	strcmp(aType, 'lin')
	p0 = [];
	[U, gof] = lin_fit(X, Y, p0, i);
else
  fprintf(1, 'Fitting type ''%s'' is not defined.\n', aType);
  return
end

end % end

%-------------------------------------------------------------------------------
% Function
%-------------------------------------------------------------------------------
function [u, gof] = lin_fit(x, y, p0, i)

p = polyfit(x(i), y(i), 1);
u = polyval(p, x);
gof = 1 - sum((y(i) - u(i)) .^ 2) / sum((y(i) - mean(y(i))) .^ 2);

end % end

%-------------------------------------------------------------------------------
% Function
%-------------------------------------------------------------------------------
function [u, gof] = exp_fit(x, y, p0)

options = optimset('Display', 'off');
p = fminsearch(@(p) cost_exp(p, x, y), p0, options);
u = func_exp(p, x);
gof = 1 - sum((y - u) .^ 2) / sum((y - mean(y)) .^ 2);

end % end

%-------------------------------------------------------------------------------
% Function
%-------------------------------------------------------------------------------
function f = cost_exp(p, x, y)

u = func_exp(p, x);
f = sum(sqrt((y - u) .^ 2));

end % end

%-------------------------------------------------------------------------------
% Function
%-------------------------------------------------------------------------------
function y = func_exp(p, x)

y = exp(p(1) * x) * p(2) + p(3);

end % end

%-------------------------------------------------------------------------------
% Function
%-------------------------------------------------------------------------------
function [u, gof] = pow_fit(x, y, p0)

options = optimset('Display', 'off');
p = fminsearch(@(p) cost_pow(p, x, y), p0, options);
u = func_pow(p, x);
gof = 1 - sum((y - u) .^ 2) / sum((y - mean(y)) .^ 2);

end % end

%-------------------------------------------------------------------------------
% Function
%-------------------------------------------------------------------------------
function f = cost_pow(p, x, y)

u = func_pow(p, x);
f = sum(sqrt((y - u) .^ 2));

end % end

%-------------------------------------------------------------------------------
% Function
%-------------------------------------------------------------------------------
function y = func_pow(p, x)

y = p(1) * x .^ p(2) + p(3);

end % end

%-------------------------------------------------------------------------------